{
  "UARTS": {
    // This is an example to use local USB-UART in Linux.
    //"DEBUG-USB0": {
    //  "Impl": "StatusConsole.UartCli",
    //  "ComName": "/dev/ttyUSB0",
    //  "Baud": "9600",
    //  "NewLine": "\r",
    //  "Screen": {
    //    "Width": 80,
    //    "Height": 20, °
    //    "Pos_X": 0,
    //    "Pos_Y": 0,
    //    "Text": "Black",
    //    "Background": "Cyan"
    //  }
    //},
    // This is an example to use local USB-UART in Linux.
    //"DEBUG-USB1": {
    //  "Impl": "StatusConsole.UartCli",
    //  "ComName": "/dev/ttyUSB1",
    //  "Baud": "115200",
    //  "NewLine": "\r",
    //  "Screen": {
    //    "Width": 80,
    //    "Height": 20,
    //    "Pos_X": 80,
    //    "Pos_Y": 0,
    //    "Text": "Black",
    //    "Background": "Yellow"
    //  }
    //},
    // This uses loacl USB-COM for Debugging a OBC "Layer3 - Debug UART" Protocol.
    "DEBUG-OBC": {
      "Impl": "StatusConsole.ObcDebugCli",
      "ImplConfigSection": "ClimbObcConfig",
      "ComName": "COM30",
      "Baud": "9600",
      "NewLine": "\n",
      "Screen": {
        "Width": 80,
        "Height": 20,
        "Pos_X": 0,
        "Pos_Y": 0,
        "Text": "Black",
        "Background": "Cyan"
      }
    },
    // This uses loacl USB-COM for Debugging a OBC "Layer3 - Debug UART" Protocol.
    "DEBUG-SDCCMD": {
      "Impl": "StatusConsole.ObcDebugCli",
      "ImplConfigSection": "ClimbObcConfig",
      "ComName": "COM21",
      "Baud": "9600",
      "NewLine": "\r",
      "Screen": {
        "Width": 80,
        "Height": 20,
        "Pos_X": 80,
        "Pos_Y": 0,
        "Text": "Black",
        "Background": "Yellow"
      }
    }
    // This uses a remote COM Port - connected to an NEXTION Display.
    // , "COM_Remote_9801": {
    //    "Impl": "StatusConsole.RemoteNextionDisplay",
    //    "RemoteHost": "mymint.rkos",
    //    "RemotePort": 9801,
    //    "NewLine": "\r",
    //    "Screen": {
    //      "Width": 100,
    //      "Height": 20,
    //      "Pos_X": 100,
    //      "Pos_Y": 0,
    //      "Text": "Black",
    //      "Background": "Yellow"
    //    }
    //  }
  }, // END UARTS

  // This section defines translation of OBC Event Data streams. Byte[0] of a frameis the module id. byte[1] bit 6...0 is the event Id. Bit7/6 in byte[1] defines the 
  // Event severity: 00 info, 01 warning, 10 error 11 fatal. rest of frame can be defined for each event type with names and parameter types as follows:
  "ClimbObcConfig": {
    "MODULES": [
      {
        "Id": 0,
        "Name": "ClimbApplication",
        "Short": "app",
        "Events": [
          {
            "Id": 2,
            "Name": "Raw Data",
            "Short": "raw"
            // If no Pars are defined, the rest of the frame is printed as hex dump. So this is good for this event!
          },
          {
            "Id": 3,
            "Name": "String Event",
            "Short": "str",
            "Pars": [
              {
                "Name": "Text",
                "Type": "char[]" // Holds all Ascii chars until \0 or end of frame.
              }
            ]
          },
          {
            "Id": 4,
            "Name": "System Init",
            "Short": "init"
          },
          {
            "Id": 5,
            "Name": "System Status",
            "Short": "stat",
            "Pars": [
              {
                "Name": "LPC1769 Chip Serial number",
                "Short": "ser",
                "Type": "byte[],4"   // This prints 4 bytes as Hex dump 
              },
              {
                "Name": "InstanceName",
                "Short": "obc",
                "Type": "char[],36"  // This prints as string until \0 or end of array. Next Par starts at the byte after.
              },
              // Allignment !?
              // in struct here starts obc_tim_systemtime_t
              {
                "Name": "EpochNumber",
                "Short": "epoch",
                "Type": "uint32"
              },
              {
                "Name": "MsInEpoch",
                "Short": "ms",
                "Type": "uint32"
              },
              // obc_tim_tledatetime_t  holding synchronized UTC time of last reset ( = epoch starttime)
              {
                "Name": "UtcYear",
                "Short": "y",
                "Type": "double"
              },
              {
                "Name": "UtcEpochStart",
                "Short": "doy", // "Day of year" as double coded according to TLE specification.
                "Type": "double"
              },
              // Memory Status
              {
                "Name": "Memory Channel Status",
                "Short": "mems",
                "Type": "byte[],4"
              },
              {
                "Name": "Sd Card Block0",
                "Short": "sdb0",
                "Type": "uint32"
              },
              {
                "Name": "Command Counter",
                "Short": "cmd",
                "Type": "uint32"
              },
              {
                "Name": "Error Counter",
                "Short": "err",
                "Type": "uint32"
              }
            ]
          }
        ]
      },
      {
        "Id": 1,
        "Name": "Timer",
        "Short": "tim",
        "Events": [
          {
            "Id": 1,
            "Name": "Initialized",
            "Short": "init"
          },
          {
            "Id": 2,
            "Name": "XTAL Started",
            "Short": "xtal"
          }
        ]
      },
      {
        "Id": 2,
        "Name": "Sensors",
        "Short": "sen",
        "Events": [
          {
            "Id": 1,
            "Name": "Values",
            "Short": "val",
            "Pars": [
              {
                "Name": "SupplyVoltage",
                "Short": "Vcc",
                "Type": "float",
                "Format": "0.00V"
              },
              {
                "Name": "SupplyCurrentBoard",
                "Short": "Icc",
                "Type": "float",
                "Format": "0.0mA"
              },
              {
                "Name": "SupplyCurrentSidepanels",
                "Short": "Isp",
                "Type": "float",
                "Format": "0.0mA"
              },
              {
                "Name": "Temperature",
                "Short": "t1",
                "Type": "float",
                "Format": "0.00°C"
              },
              {
                "Name": "TempSHT30",
                "Short": "t2",
                "Type": "float",
                "Format": "0.00°C"
              },
              {
                "Name": "HumidityPercent",
                "Short": "hum",
                "Type": "float",
                "Format": "0.0%"
              }
            ]
          }
        ]
      },
      {
        "Name": "Memory",
        "Short": "mem",
        "Id": 3,
        "Events": [
          {
            "Id": 1,
            "Name": "Initialized",
            "Short": "init"
          },
          {
            "Id": 2,
            "Name": "Block0 Updated",
            "Short": "b0wr"
          }
        ]
      },
      {
        "Name": "Mram",
        "Short": "mrm",
        "Id": 128,
        "Events": [
          {
            "Id": 1,
            "Name": "Job Error",
            "Short": "err"
          }
        ]
      },
      {
        "Name": "SdCard",
        "Short": "sdc",
        "Id": 129,
        "Events": [
          {
            "Id": 1,
            "Name": "Status",
            "Short": "stat"
          },
          {
            "Id": 2,
            "Name": "Unimplemented Card Type",
            "Short": "n.i."
          }
        ]
      }
    ]
  }
}
